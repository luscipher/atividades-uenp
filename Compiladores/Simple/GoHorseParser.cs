//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GoHorse.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class GoHorseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, EOL=11, NUMBER=12, INT=13, FLOAT_NUM=14, INTEGER=15, FLOAT=16, 
		BOOLEAN=17, BOOL_TRUE=18, BOOL_FALSE=19, STRING=20, ARRAY=21, CUSTOM_TYPE=22, 
		REFERENCE=23, READ=24, WRITE=25, ID=26, ARRAY_SIZE=27, COMMA=28, COLON=29, 
		ASSIGN=30, LPAREN=31, RPAREN=32, LBRACKET=33, RBRACKET=34, PLUS=35, MINUS=36, 
		MULT=37, DIV=38, MOD=39, AND=40, OR=41, NOT=42, EQ=43, NEQ=44, LT=45, 
		GT=46, LTE=47, GTE=48, COMMENT=49, WS=50;
	public const int
		RULE_program = 0, RULE_stat = 1, RULE_readln = 2, RULE_writeln = 3, RULE_ifStat = 4, 
		RULE_whileStat = 5, RULE_untilStat = 6, RULE_forStat = 7, RULE_assign = 8, 
		RULE_varDecl = 9, RULE_assignment = 10, RULE_refeExpr = 11, RULE_func = 12, 
		RULE_params = 13, RULE_param = 14, RULE_orExpr = 15, RULE_andExpr = 16, 
		RULE_equalExpr = 17, RULE_relatExpr = 18, RULE_addExpr = 19, RULE_multExpr = 20, 
		RULE_unary_expr = 21, RULE_primary_expr = 22, RULE_expr = 23, RULE_term = 24, 
		RULE_factor = 25, RULE_type = 26;
	public static readonly string[] ruleNames = {
		"program", "stat", "readln", "writeln", "ifStat", "whileStat", "untilStat", 
		"forStat", "assign", "varDecl", "assignment", "refeExpr", "func", "params", 
		"param", "orExpr", "andExpr", "equalExpr", "relatExpr", "addExpr", "multExpr", 
		"unary_expr", "primary_expr", "expr", "term", "factor", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'if'", "'else'", "'while'", "'repeat'", "'until'", "'for'", 
		"'['", "']'", "'func'", null, null, null, null, "'integer'", "'float'", 
		"'boolean'", "'true'", "'false'", null, "'array'", null, "'&'", "'readln'", 
		"'writeln'", null, null, "','", "':'", "'='", "'('", "')'", "'{'", "'}'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'=='", "'!='", 
		"'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "EOL", 
		"NUMBER", "INT", "FLOAT_NUM", "INTEGER", "FLOAT", "BOOLEAN", "BOOL_TRUE", 
		"BOOL_FALSE", "STRING", "ARRAY", "CUSTOM_TYPE", "REFERENCE", "READ", "WRITE", 
		"ID", "ARRAY_SIZE", "COMMA", "COLON", "ASSIGN", "LPAREN", "RPAREN", "LBRACKET", 
		"RBRACKET", "PLUS", "MINUS", "MULT", "DIV", "MOD", "AND", "OR", "NOT", 
		"EQ", "NEQ", "LT", "GT", "LTE", "GTE", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoHorse.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GoHorseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GoHorseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GoHorseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext[] func() {
			return GetRuleContexts<FuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func(int i) {
			return GetRuleContext<FuncContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 56;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__1:
					case T__3:
					case T__4:
					case T__6:
					case INTEGER:
					case FLOAT:
					case BOOLEAN:
					case STRING:
					case ARRAY:
					case CUSTOM_TYPE:
					case READ:
					case WRITE:
					case ID:
						{
						State = 54;
						stat();
						}
						break;
					case T__9:
						{
						State = 55;
						func();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 60;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReadlnContext readln() {
			return GetRuleContext<ReadlnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WritelnContext writeln() {
			return GetRuleContext<WritelnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilStatContext untilStat() {
			return GetRuleContext<UntilStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatContext forStat() {
			return GetRuleContext<ForStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				readln();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62;
				writeln();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63;
				ifStat();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 64;
				whileStat();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 65;
				untilStat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 66;
				forStat();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 67;
				varDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 68;
				assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadlnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(GoHorseParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GoHorseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoHorseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GoHorseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(GoHorseParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(GoHorseParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GoHorseParser.STRING, 0); }
		public ReadlnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readln; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterReadln(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitReadln(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadln(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadlnContext readln() {
		ReadlnContext _localctx = new ReadlnContext(Context, State);
		EnterRule(_localctx, 4, RULE_readln);
		int _la;
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				Match(READ);
				State = 72;
				Match(LPAREN);
				State = 73;
				Match(ID);
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REFERENCE) {
					{
					State = 74;
					Match(REFERENCE);
					}
				}

				State = 77;
				Match(RPAREN);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				Match(WRITE);
				State = 79;
				Match(LPAREN);
				State = 82;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 80;
					expr(0);
					}
					break;
				case 2:
					{
					State = 81;
					Match(STRING);
					}
					break;
				}
				State = 84;
				Match(RPAREN);
				State = 85;
				Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WritelnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(GoHorseParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GoHorseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GoHorseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(GoHorseParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoHorseParser.ID, 0); }
		public WritelnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeln; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterWriteln(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitWriteln(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteln(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WritelnContext writeln() {
		WritelnContext _localctx = new WritelnContext(Context, State);
		EnterRule(_localctx, 6, RULE_writeln);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WRITE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				Match(WRITE);
				State = 89;
				Match(LPAREN);
				State = 90;
				expr(0);
				State = 91;
				Match(RPAREN);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93;
				Match(READ);
				State = 94;
				Match(LPAREN);
				State = 95;
				Match(ID);
				State = 96;
				Match(RPAREN);
				State = 97;
				Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GoHorseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GoHorseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext[] program() {
			return GetRuleContexts<ProgramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program(int i) {
			return GetRuleContext<ProgramContext>(i);
		}
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__1);
			State = 101;
			Match(LPAREN);
			State = 102;
			expr(0);
			State = 103;
			Match(RPAREN);
			State = 104;
			program();
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 105;
				Match(T__2);
				State = 106;
				program();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GoHorseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GoHorseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		public WhileStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterWhileStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitWhileStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat() {
		WhileStatContext _localctx = new WhileStatContext(Context, State);
		EnterRule(_localctx, 10, RULE_whileStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(T__3);
			State = 110;
			Match(LPAREN);
			State = 111;
			expr(0);
			State = 112;
			Match(RPAREN);
			State = 113;
			program();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GoHorseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GoHorseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(GoHorseParser.EOL, 0); }
		public UntilStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterUntilStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitUntilStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilStatContext untilStat() {
		UntilStatContext _localctx = new UntilStatContext(Context, State);
		EnterRule(_localctx, 12, RULE_untilStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(T__4);
			State = 116;
			program();
			State = 117;
			Match(T__5);
			State = 118;
			Match(LPAREN);
			State = 119;
			expr(0);
			State = 120;
			Match(RPAREN);
			State = 121;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GoHorseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext[] assign() {
			return GetRuleContexts<AssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign(int i) {
			return GetRuleContext<AssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GoHorseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		public ForStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterForStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitForStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatContext forStat() {
		ForStatContext _localctx = new ForStatContext(Context, State);
		EnterRule(_localctx, 14, RULE_forStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(T__6);
			State = 124;
			Match(LPAREN);
			State = 125;
			assign();
			State = 126;
			Match(T__0);
			State = 127;
			expr(0);
			State = 128;
			Match(T__0);
			State = 129;
			assign();
			State = 130;
			Match(RPAREN);
			State = 131;
			program();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoHorseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoHorseParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 16, RULE_assign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(ID);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 134;
				Match(T__7);
				State = 135;
				expr(0);
				State = 136;
				Match(T__8);
				}
			}

			State = 140;
			Match(ASSIGN);
			State = 141;
			expr(0);
			State = 142;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoHorseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_SIZE() { return GetToken(GoHorseParser.ARRAY_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoHorseParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_varDecl);
		int _la;
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				type();
				State = 145;
				Match(ID);
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY_SIZE) {
					{
					State = 146;
					Match(ARRAY_SIZE);
					}
				}

				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 149;
					Match(ASSIGN);
					State = 150;
					expr(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				type();
				State = 154;
				Match(ID);
				State = 155;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefeExprContext refeExpr() {
			return GetRuleContext<RefeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoHorseParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoHorseParser.ID, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				refeExpr();
				State = 160;
				Match(ASSIGN);
				State = 161;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				Match(ID);
				State = 164;
				Match(ASSIGN);
				State = 165;
				expr(0);
				State = 166;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoHorseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(GoHorseParser.REFERENCE, 0); }
		public RefeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterRefeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitRefeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefeExprContext refeExpr() {
		RefeExprContext _localctx = new RefeExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_refeExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(ID);
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 171;
				Match(REFERENCE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoHorseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GoHorseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GoHorseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoHorseParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 24, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(T__9);
			State = 175;
			Match(ID);
			State = 176;
			Match(LPAREN);
			State = 177;
			@params();
			State = 178;
			Match(RPAREN);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 179;
				Match(COLON);
				State = 180;
				type();
				}
			}

			State = 183;
			program();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoHorseParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoHorseParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 26, RULE_params);
		int _la;
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185;
				param();
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 186;
					Match(COMMA);
					State = 187;
					param();
					}
					}
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoHorseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoHorseParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 28, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(ID);
			State = 197;
			Match(COLON);
			State = 198;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(GoHorseParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(GoHorseParser.OR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_orExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			andExpr();
			State = 205;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 201;
					Match(OR);
					State = 202;
					andExpr();
					}
					} 
				}
				State = 207;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualExprContext[] equalExpr() {
			return GetRuleContexts<EqualExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualExprContext equalExpr(int i) {
			return GetRuleContext<EqualExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(GoHorseParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(GoHorseParser.AND, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_andExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			equalExpr();
			State = 213;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 209;
					Match(AND);
					State = 210;
					equalExpr();
					}
					} 
				}
				State = 215;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelatExprContext[] relatExpr() {
			return GetRuleContexts<RelatExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelatExprContext relatExpr(int i) {
			return GetRuleContext<RelatExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(GoHorseParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(GoHorseParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEQ() { return GetTokens(GoHorseParser.NEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ(int i) {
			return GetToken(GoHorseParser.NEQ, i);
		}
		public EqualExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterEqualExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitEqualExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualExprContext equalExpr() {
		EqualExprContext _localctx = new EqualExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_equalExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			relatExpr();
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 217;
					_la = TokenStream.LA(1);
					if ( !(_la==EQ || _la==NEQ) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 218;
					relatExpr();
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelatExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(GoHorseParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(GoHorseParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(GoHorseParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(GoHorseParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LTE() { return GetTokens(GoHorseParser.LTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE(int i) {
			return GetToken(GoHorseParser.LTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GTE() { return GetTokens(GoHorseParser.GTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE(int i) {
			return GetToken(GoHorseParser.GTE, i);
		}
		public RelatExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relatExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterRelatExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitRelatExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelatExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelatExprContext relatExpr() {
		RelatExprContext _localctx = new RelatExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_relatExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			addExpr();
			State = 229;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 225;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 527765581332480L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 226;
					addExpr();
					}
					} 
				}
				State = 231;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(GoHorseParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(GoHorseParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(GoHorseParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(GoHorseParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_addExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			multExpr();
			State = 237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 233;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 234;
					multExpr();
					}
					} 
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext[] unary_expr() {
			return GetRuleContexts<Unary_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr(int i) {
			return GetRuleContext<Unary_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(GoHorseParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(GoHorseParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(GoHorseParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(GoHorseParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(GoHorseParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(GoHorseParser.MOD, i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(Context, State);
		EnterRule(_localctx, 40, RULE_multExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			unary_expr();
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 241;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 242;
					unary_expr();
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GoHorseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GoHorseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(GoHorseParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Primary_exprContext primary_expr() {
			return GetRuleContext<Primary_exprContext>(0);
		}
		public Unary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterUnary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitUnary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_exprContext unary_expr() {
		Unary_exprContext _localctx = new Unary_exprContext(Context, State);
		EnterRule(_localctx, 42, RULE_unary_expr);
		int _la;
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 249;
				unary_expr();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				Match(NOT);
				State = 251;
				unary_expr();
				}
				break;
			case INT:
			case FLOAT_NUM:
			case BOOL_TRUE:
			case BOOL_FALSE:
			case ID:
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252;
				primary_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GoHorseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GoHorseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RefeExprContext refeExpr() {
			return GetRuleContext<RefeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GoHorseParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUM() { return GetToken(GoHorseParser.FLOAT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TRUE() { return GetToken(GoHorseParser.BOOL_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_FALSE() { return GetToken(GoHorseParser.BOOL_FALSE, 0); }
		public Primary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterPrimary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitPrimary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_exprContext primary_expr() {
		Primary_exprContext _localctx = new Primary_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_primary_expr);
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				Match(LPAREN);
				State = 256;
				expr(0);
				State = 257;
				Match(RPAREN);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				refeExpr();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				Match(INT);
				}
				break;
			case FLOAT_NUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261;
				Match(FLOAT_NUM);
				}
				break;
			case BOOL_TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 262;
				Match(BOOL_TRUE);
				}
				break;
			case BOOL_FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 263;
				Match(BOOL_FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GoHorseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GoHorseParser.MINUS, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 267;
				orExpr();
				}
				break;
			case 2:
				{
				State = 268;
				term(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 279;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 277;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 271;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 272;
						Match(PLUS);
						State = 273;
						term(0);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 274;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 275;
						Match(MINUS);
						State = 276;
						term(0);
						}
						break;
					}
					} 
				}
				State = 281;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(GoHorseParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(GoHorseParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(GoHorseParser.MOD, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 283;
			factor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 294;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 285;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 286;
						Match(MULT);
						State = 287;
						factor();
						}
						break;
					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 288;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 289;
						Match(DIV);
						State = 290;
						factor();
						}
						break;
					case 3:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 291;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 292;
						Match(MOD);
						State = 293;
						factor();
						}
						break;
					}
					} 
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoHorseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(GoHorseParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GoHorseParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GoHorseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GoHorseParser.RPAREN, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 50, RULE_factor);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				Match(ID);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 301;
				Match(STRING);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 302;
				Match(LPAREN);
				State = 303;
				expr(0);
				State = 304;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(GoHorseParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GoHorseParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(GoHorseParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GoHorseParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(GoHorseParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUSTOM_TYPE() { return GetToken(GoHorseParser.CUSTOM_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoHorseParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoHorseListener typedListener = listener as IGoHorseListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoHorseVisitor<TResult> typedVisitor = visitor as IGoHorseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_type);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 308;
				Match(INTEGER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309;
				Match(FLOAT);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 310;
				Match(BOOLEAN);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 311;
				Match(STRING);
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 312;
				Match(ARRAY);
				State = 313;
				type();
				}
				break;
			case CUSTOM_TYPE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 314;
				Match(CUSTOM_TYPE);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 7);
				{
				State = 315;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return expr_sempred((ExprContext)_localctx, predIndex);
		case 24: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}

    internal void AddErrorListener(GoHorseErrorListener errorListener)
    {
        throw new NotImplementedException();
    }

    internal void AddParseListener(SemanticGoHorseListener semanticListener)
    {
        throw new NotImplementedException();
    }

    private static int[] _serializedATN = {
		4,1,50,319,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,5,0,57,8,0,10,
		0,12,0,60,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,70,8,1,1,2,1,2,1,2,1,
		2,3,2,76,8,2,1,2,1,2,1,2,1,2,1,2,3,2,83,8,2,1,2,1,2,3,2,87,8,2,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,99,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		3,4,108,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,139,8,8,
		1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,148,8,9,1,9,1,9,3,9,152,8,9,1,9,1,9,1,
		9,1,9,3,9,158,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,169,
		8,10,1,11,1,11,3,11,173,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,182,
		8,12,1,12,1,12,1,13,1,13,1,13,5,13,189,8,13,10,13,12,13,192,9,13,1,13,
		3,13,195,8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,204,8,15,10,15,12,
		15,207,9,15,1,16,1,16,1,16,5,16,212,8,16,10,16,12,16,215,9,16,1,17,1,17,
		1,17,5,17,220,8,17,10,17,12,17,223,9,17,1,18,1,18,1,18,5,18,228,8,18,10,
		18,12,18,231,9,18,1,19,1,19,1,19,5,19,236,8,19,10,19,12,19,239,9,19,1,
		20,1,20,1,20,5,20,244,8,20,10,20,12,20,247,9,20,1,21,1,21,1,21,1,21,1,
		21,3,21,254,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,265,
		8,22,1,23,1,23,1,23,3,23,270,8,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,278,
		8,23,10,23,12,23,281,9,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,5,24,295,8,24,10,24,12,24,298,9,24,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,3,25,307,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,
		26,317,8,26,1,26,0,2,46,48,27,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,0,5,2,0,1,1,11,11,1,0,43,44,1,0,45,
		48,1,0,35,36,1,0,37,39,343,0,58,1,0,0,0,2,69,1,0,0,0,4,86,1,0,0,0,6,98,
		1,0,0,0,8,100,1,0,0,0,10,109,1,0,0,0,12,115,1,0,0,0,14,123,1,0,0,0,16,
		133,1,0,0,0,18,157,1,0,0,0,20,168,1,0,0,0,22,170,1,0,0,0,24,174,1,0,0,
		0,26,194,1,0,0,0,28,196,1,0,0,0,30,200,1,0,0,0,32,208,1,0,0,0,34,216,1,
		0,0,0,36,224,1,0,0,0,38,232,1,0,0,0,40,240,1,0,0,0,42,253,1,0,0,0,44,264,
		1,0,0,0,46,269,1,0,0,0,48,282,1,0,0,0,50,306,1,0,0,0,52,316,1,0,0,0,54,
		57,3,2,1,0,55,57,3,24,12,0,56,54,1,0,0,0,56,55,1,0,0,0,57,60,1,0,0,0,58,
		56,1,0,0,0,58,59,1,0,0,0,59,1,1,0,0,0,60,58,1,0,0,0,61,70,3,4,2,0,62,70,
		3,6,3,0,63,70,3,8,4,0,64,70,3,10,5,0,65,70,3,12,6,0,66,70,3,14,7,0,67,
		70,3,18,9,0,68,70,3,20,10,0,69,61,1,0,0,0,69,62,1,0,0,0,69,63,1,0,0,0,
		69,64,1,0,0,0,69,65,1,0,0,0,69,66,1,0,0,0,69,67,1,0,0,0,69,68,1,0,0,0,
		70,3,1,0,0,0,71,72,5,24,0,0,72,73,5,31,0,0,73,75,5,26,0,0,74,76,5,23,0,
		0,75,74,1,0,0,0,75,76,1,0,0,0,76,77,1,0,0,0,77,87,5,32,0,0,78,79,5,25,
		0,0,79,82,5,31,0,0,80,83,3,46,23,0,81,83,5,20,0,0,82,80,1,0,0,0,82,81,
		1,0,0,0,82,83,1,0,0,0,83,84,1,0,0,0,84,85,5,32,0,0,85,87,5,1,0,0,86,71,
		1,0,0,0,86,78,1,0,0,0,87,5,1,0,0,0,88,89,5,25,0,0,89,90,5,31,0,0,90,91,
		3,46,23,0,91,92,5,32,0,0,92,99,1,0,0,0,93,94,5,24,0,0,94,95,5,31,0,0,95,
		96,5,26,0,0,96,97,5,32,0,0,97,99,5,1,0,0,98,88,1,0,0,0,98,93,1,0,0,0,99,
		7,1,0,0,0,100,101,5,2,0,0,101,102,5,31,0,0,102,103,3,46,23,0,103,104,5,
		32,0,0,104,107,3,0,0,0,105,106,5,3,0,0,106,108,3,0,0,0,107,105,1,0,0,0,
		107,108,1,0,0,0,108,9,1,0,0,0,109,110,5,4,0,0,110,111,5,31,0,0,111,112,
		3,46,23,0,112,113,5,32,0,0,113,114,3,0,0,0,114,11,1,0,0,0,115,116,5,5,
		0,0,116,117,3,0,0,0,117,118,5,6,0,0,118,119,5,31,0,0,119,120,3,46,23,0,
		120,121,5,32,0,0,121,122,7,0,0,0,122,13,1,0,0,0,123,124,5,7,0,0,124,125,
		5,31,0,0,125,126,3,16,8,0,126,127,5,1,0,0,127,128,3,46,23,0,128,129,5,
		1,0,0,129,130,3,16,8,0,130,131,5,32,0,0,131,132,3,0,0,0,132,15,1,0,0,0,
		133,138,5,26,0,0,134,135,5,8,0,0,135,136,3,46,23,0,136,137,5,9,0,0,137,
		139,1,0,0,0,138,134,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,141,5,
		30,0,0,141,142,3,46,23,0,142,143,5,1,0,0,143,17,1,0,0,0,144,145,3,52,26,
		0,145,147,5,26,0,0,146,148,5,27,0,0,147,146,1,0,0,0,147,148,1,0,0,0,148,
		151,1,0,0,0,149,150,5,30,0,0,150,152,3,46,23,0,151,149,1,0,0,0,151,152,
		1,0,0,0,152,158,1,0,0,0,153,154,3,52,26,0,154,155,5,26,0,0,155,156,5,1,
		0,0,156,158,1,0,0,0,157,144,1,0,0,0,157,153,1,0,0,0,158,19,1,0,0,0,159,
		160,3,22,11,0,160,161,5,30,0,0,161,162,3,46,23,0,162,169,1,0,0,0,163,164,
		5,26,0,0,164,165,5,30,0,0,165,166,3,46,23,0,166,167,5,1,0,0,167,169,1,
		0,0,0,168,159,1,0,0,0,168,163,1,0,0,0,169,21,1,0,0,0,170,172,5,26,0,0,
		171,173,5,23,0,0,172,171,1,0,0,0,172,173,1,0,0,0,173,23,1,0,0,0,174,175,
		5,10,0,0,175,176,5,26,0,0,176,177,5,31,0,0,177,178,3,26,13,0,178,181,5,
		32,0,0,179,180,5,29,0,0,180,182,3,52,26,0,181,179,1,0,0,0,181,182,1,0,
		0,0,182,183,1,0,0,0,183,184,3,0,0,0,184,25,1,0,0,0,185,190,3,28,14,0,186,
		187,5,28,0,0,187,189,3,28,14,0,188,186,1,0,0,0,189,192,1,0,0,0,190,188,
		1,0,0,0,190,191,1,0,0,0,191,195,1,0,0,0,192,190,1,0,0,0,193,195,1,0,0,
		0,194,185,1,0,0,0,194,193,1,0,0,0,195,27,1,0,0,0,196,197,5,26,0,0,197,
		198,5,29,0,0,198,199,3,52,26,0,199,29,1,0,0,0,200,205,3,32,16,0,201,202,
		5,41,0,0,202,204,3,32,16,0,203,201,1,0,0,0,204,207,1,0,0,0,205,203,1,0,
		0,0,205,206,1,0,0,0,206,31,1,0,0,0,207,205,1,0,0,0,208,213,3,34,17,0,209,
		210,5,40,0,0,210,212,3,34,17,0,211,209,1,0,0,0,212,215,1,0,0,0,213,211,
		1,0,0,0,213,214,1,0,0,0,214,33,1,0,0,0,215,213,1,0,0,0,216,221,3,36,18,
		0,217,218,7,1,0,0,218,220,3,36,18,0,219,217,1,0,0,0,220,223,1,0,0,0,221,
		219,1,0,0,0,221,222,1,0,0,0,222,35,1,0,0,0,223,221,1,0,0,0,224,229,3,38,
		19,0,225,226,7,2,0,0,226,228,3,38,19,0,227,225,1,0,0,0,228,231,1,0,0,0,
		229,227,1,0,0,0,229,230,1,0,0,0,230,37,1,0,0,0,231,229,1,0,0,0,232,237,
		3,40,20,0,233,234,7,3,0,0,234,236,3,40,20,0,235,233,1,0,0,0,236,239,1,
		0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,39,1,0,0,0,239,237,1,0,0,0,240,
		245,3,42,21,0,241,242,7,4,0,0,242,244,3,42,21,0,243,241,1,0,0,0,244,247,
		1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,41,1,0,0,0,247,245,1,0,0,0,
		248,249,7,3,0,0,249,254,3,42,21,0,250,251,5,42,0,0,251,254,3,42,21,0,252,
		254,3,44,22,0,253,248,1,0,0,0,253,250,1,0,0,0,253,252,1,0,0,0,254,43,1,
		0,0,0,255,256,5,31,0,0,256,257,3,46,23,0,257,258,5,32,0,0,258,265,1,0,
		0,0,259,265,3,22,11,0,260,265,5,13,0,0,261,265,5,14,0,0,262,265,5,18,0,
		0,263,265,5,19,0,0,264,255,1,0,0,0,264,259,1,0,0,0,264,260,1,0,0,0,264,
		261,1,0,0,0,264,262,1,0,0,0,264,263,1,0,0,0,265,45,1,0,0,0,266,267,6,23,
		-1,0,267,270,3,30,15,0,268,270,3,48,24,0,269,266,1,0,0,0,269,268,1,0,0,
		0,270,279,1,0,0,0,271,272,10,2,0,0,272,273,5,35,0,0,273,278,3,48,24,0,
		274,275,10,1,0,0,275,276,5,36,0,0,276,278,3,48,24,0,277,271,1,0,0,0,277,
		274,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,47,1,0,
		0,0,281,279,1,0,0,0,282,283,6,24,-1,0,283,284,3,50,25,0,284,296,1,0,0,
		0,285,286,10,3,0,0,286,287,5,37,0,0,287,295,3,50,25,0,288,289,10,2,0,0,
		289,290,5,38,0,0,290,295,3,50,25,0,291,292,10,1,0,0,292,293,5,39,0,0,293,
		295,3,50,25,0,294,285,1,0,0,0,294,288,1,0,0,0,294,291,1,0,0,0,295,298,
		1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,49,1,0,0,0,298,296,1,0,0,0,
		299,307,5,26,0,0,300,307,5,12,0,0,301,307,5,20,0,0,302,303,5,31,0,0,303,
		304,3,46,23,0,304,305,5,32,0,0,305,307,1,0,0,0,306,299,1,0,0,0,306,300,
		1,0,0,0,306,301,1,0,0,0,306,302,1,0,0,0,307,51,1,0,0,0,308,317,5,15,0,
		0,309,317,5,16,0,0,310,317,5,17,0,0,311,317,5,20,0,0,312,313,5,21,0,0,
		313,317,3,52,26,0,314,317,5,22,0,0,315,317,5,26,0,0,316,308,1,0,0,0,316,
		309,1,0,0,0,316,310,1,0,0,0,316,311,1,0,0,0,316,312,1,0,0,0,316,314,1,
		0,0,0,316,315,1,0,0,0,317,53,1,0,0,0,32,56,58,69,75,82,86,98,107,138,147,
		151,157,168,172,181,190,194,205,213,221,229,237,245,253,264,269,277,279,
		294,296,306,316
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
